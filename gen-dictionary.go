// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package main

type ByteDictionary struct {
	data map[byte][5]byte
}

func NewByteDictionary() *ByteDictionary {
	return &ByteDictionary{
		data: map[byte][5]byte{},
	}
}
func (s *ByteDictionary) Set(key byte, value [5]byte) {
	if s.data == nil {
		s.data = map[byte][5]byte{}
	}
	s.data[key] = value
}

func (s *ByteDictionary) Delete(key byte) bool {
	_, ok := s.data[key]
	if ok {
		delete(s.data, key)
	}
	return ok
}

func (s *ByteDictionary) Has(key byte) bool {
	_, result := s.data[key]

	return result
}

func (s *ByteDictionary) Get(key byte) [5]byte {
	result, _ := s.data[key]
	return result
}

func (s *ByteDictionary) Clear() {
	s.data = map[byte][5]byte{}
}

func (s *ByteDictionary) Size() int {
	return len(s.data)
}

func (s *ByteDictionary) Keys() []byte {
	keys := make([]byte, len(s.data))
	for k := range s.data {
		keys = append(keys, k)
	}
	return keys
}

func (s *ByteDictionary) Values() [][5]byte {
	values := make([][5]byte, len(s.data))
	for _, v := range s.data {
		values = append(values, v)
	}
	return values
}
